package com.ddcat.exampleChat;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.*;

/**
 * This example illustrates a process which sends then receives using a datagram
 * socket.
 * 
 * @author M. L. Liu
 */
public class Example2ReceiverSender {
	// An application which sends then receives a message using
	// connectionless datagram socket.
	// Four command line arguments are expected, in order:
	// <domain name or IP address of the receiver>
	// <port number of the receiver's datagram socket>
	// <port number of this process's datagram socket>
	// <message, a string, to send>

	//args[0]  -- client id 
	//args[1]  -- port number
	//args[2]  -- dest id
	//args[3]  -- message
	public static void main(String[] args) {
		if (args.length != 4)
			System.out
					.println("This program requires four command line arguments");
		else {
			try {
				BufferedWriter out = new BufferedWriter(new FileWriter(args[0]));
				InetAddress address = InetAddress.getLocalHost();
				String hostname = address.getHostName();
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			try {
				InetAddress receiverHost = InetAddress.getByName(args[0]);
				int receiverPort = Integer.parseInt(args[1]);
				int myPort = Integer.parseInt(args[2]);
				String message = args[3];
				MyDatagramSocket mySocket = new MyDatagramSocket(myPort);
				// instantiates a datagram socket for both sending
				// and receiving data
				// First wait to receive a datagram from the socket
				System.out.println(mySocket.receiveMessage());
				// Now send a message to the other process.
				mySocket.sendMessage(receiverHost, receiverPort, message);
				mySocket.close();
			} // end try
			catch (Exception ex) {
				ex.printStackTrace();
			} // end catch
		} // end else
	} // end main

} // end class
